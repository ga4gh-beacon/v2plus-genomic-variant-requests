$schema: https://json-schema.org/draft/2020-12/schema
g_variant:
  type: object

################################################################################
# properties ###################################################################
################################################################################

  properties:

################################################################################
# Beacon v2.n query parameters, either adopted from v2 or intrtoduced for v2.n
################################################################################

    referenceAccession:
      description: >-
        A replacement for the `referenceName` and `assemblyId` parameters following
        the VRS v2 definition.
        Note: The name of this parameter allows for a use of a similar one for encoding
        an identifier for an adjacent sequence and is potentially subject to change.
        Status: PROPOSED FOR BEACON v2.n
      $ref: "#/$defs/RefgetAccession"

    start:
      description: >-
        Precise or fuzzy start coordinate position(s), allele locus
        (0-based, inclusive).
        * `start` only:
          - for single positions, e.g. the start of a specified sequence
            alteration where the size is given through the specified `alternateBases`
          - typical use are queries for SNV and small InDels
          - the use of `start` without an `end` parameter requires the use of
            `alternateBases`
        * 1 value in both `start` and `end`:
          - for searching any variant falling fully or partially within the range
            between `start` and `end` (a.k.a. "range query")
          - additional use of `variantType` OR `alternateBases` can limit the
            scope of the query
          - by convention, partial overlaps of variants with the indicated genomic
            range are accepted; for specific overlap requirements the 4-parameter
            "Bracket Queries" should be employed
        * 2 values in both `start` and `end` for constructing a "Bracket Query":
          - can be used to match any contiguous genomic interval, e.g. for querying
            imprecise positions
          - identifies all structural variants starting between `start[0]` and `start[1]`,
            and ending between `end[0]` <-> `end[1]`
          - single or double sided precise matches can be achieved by setting
            `start[1]=start[0]+1` and `end[1]=end[0]+1`
        Origin: Beacon v2.0, with modified definition.
        TODO: Move detailed usage description to general query documentation and
              examples.
      oneOf:
        - integer
        - $ref: "#/$defs/Range"

    end:
      description: >-
        Precise or bracketing the end of the variants of interest:
        * (0-based, exclusive) - see `start`
        * for bracket queries (e.g. CNV matching) provide a range of 2 values
          (e.g. `[111,222]`).
        Origin: Beacon v2.0, with modified definition.
      oneOf:
        - integer
        - $ref: "#/$defs/Range"

    sequence:
      description: >-
        Replaces the Beacon v1-v2.1 `alternateBases` to indicate clear alignment
        in use with VRS
        Origin: Beacon v2.n, based on VRS v1.n+
      $ref: "#/$defs/Sequence"

    copyChange:
      description: >-
        MUST use a primaryCode representing one of:
        * EFO:0030069: complete genomic loss
        * EFO:0020073: high-level loss
        * EFO:0030068: low-level loss
        * EFO:0030067: loss
        * EFO:0030064: regional base ploidy
        * EFO:0030070: gain
        * EFO:0030071: low-level gain
        * EFO:0030072: high-level gain
        Origin: Beacon v2.n, based on VRS v1.3+
      type: string

    adjacencyAccession:
      description: >-
        A replacement for the `mateName` parameters following the VRS v2 definition.
        Note: The name of this parameter allows for encoding an identifier for an
        adjacent sequence and is potentially subject to change.
        Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification
      $ref: "#/$defs/RefgetAccession"

    adjacencyStart:
      description: >-
        Start position or range (_i.e._ in case of a fuzzy breakpoint) on an
        adjacent sequence in case of a sequence adjecency
        Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification
      oneOf:
        - integer
        - $ref: "#/$defs/Range"

    adjacencyEnd:
      description: >-
        End position or range (_i.e._ in case of a fuzzy breakpoint) on an
        adjacent sequence in case of a sequence adjecency
        Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification
      oneOf:
        - integer
        - $ref: "#/$defs/Range"

    variantId:
      description: >-
        * A variant identifier such as a VRSid, ClinVar id, dbSNP rsID or a
          COSMIC identifier
        * In the default data model this query parameter corresponds to
          `identifiers.variantAlternateIds` but potentially can map to other
          identifiers as well.
        Status: PROPOSED FOR BEACON v2.n
      type: string
      examples:
        - ClinGen:CA152954
        - dbSNP:rs587780345

    geneId:
      description: >-
        * A gene identifier
        * It is strongly suggested to use a symbol following
          the HGNC (https://www.genenames.org) nomenclature.
        Origin: Beacon v2.0
      type: string
      examples:
        - BRAF
        - SCN5A

    aminoacidChange:
      description: >-
        Aminoacid alteration of interest. Format 1 letter
        Origin: Beacon v2.0
      type: string
      examples:
        - V600E
        - M734V

    genomicAlleleShortForm:
      description: >-
        HGVSId descriptor
        Origin: Beacon v2.0
      type: string
      examples:
        - NM_004006.2:c.4375C>T

    molecularEffect:
      description: >-
        CURIE that describes the class of molecular consequence. Values from SO
        (Sequence Ontology) are recommended, e.g.
        * `SO:0001583`: missense variant
        * `SO:0001589`: frameshift variant
        * `SO:0002054`: loss of function variant
        Reference: [SO](http://www.sequenceontology.org/browser/current_svn/term/SO:0001536)
        Status: PROPOSED FOR BEACON v2.n
        Notes:
        * The definition mimics the Beacon v2 model and maps to `phenotypicEffects.clinicalRelevance`
        * The use of emerging VA classes has to be evaluated.
        * This is part of the general topic of "filters" versus named parameters
          in variation queries.
      type: string
      examples:
        - SO:0001583
        - SO:0002054

    clinicalRelevance:
      description: >-
        Indication of the clinical relevance of the variant
        Recommended: A value from the five-tiered classification from the American
        College of Medical Genetics (ACMG) designed to describe the likelihood that
        a genomic sequence variant is causative of an inherited disease. (NCIT:C168798).
        Status: PROPOSED FOR BEACON v2.n
        Notes:
        * The definition mimics the Beacon v2 model and maps to `molecularAttributes.molecularEffects`
        * The use of emerging VA classes has to be evaluated.
        * This is part of the general topic of "filters" versus named parameters
          in variation queries.
      type: string
      enum:
        - benign
        - likely benign
        - uncertain significance
        - likely pathogenic
        - pathogenic

    variantMinLength:
      description: >-
        * Minimum length in bases of a genomic variant
        * This is an optional parameter without prescribed use. While a length is
          commonly available for structural variants such as copy number variations,
          it is recommended that length based queries should also be supported for
          variants with indicated referenceBases and alternateBases, to enable
          length-specific wildcard queries.
        Origin: Beacon v2.0
      type: integer
      format: int64
      minimum: 0

    variantMaxLength:
      description: >-
        * Maximum length in bases of a genomic variant.
        * This is an optional parameter without prescribed use. While a length is
          commonly available for structural variants such as copy number variations,
          it is recommended that length based queries should also be supported for
          variants with indicated referenceBases and alternateBases, to enable
          length-specific wildcard queries.
        Origin: Beacon v2.0
      type: integer
      format: int64
      minimum: 1

################################################################################
# query parameters below are Beacon v0.3 -> v2.1 legacy and should be
# transitioned away from, with possible hard deprecation in Beacon v3
################################################################################

    assemblyId:
      description: >-
        This is a Beacon legacy parameter which is not needed with the versioned
        sequence identifiers recommended since Beacon v2 and might lead to
        inconsistencies if used with versioned `referenName` or `referenceAccession`.
        Status: LEGACY, DEPRECATED
      $ref: "#/$defs/Assembly"

    referenceName:
      description: >-
        The name of the reference sequence in which variant coordinates are given.
        While this parameter is still supported, and also allows the *recommended*
        use of versioned sequence identifiers, it is recommended to transition to
        the more tightly scoped `referenceAccession` parameter.
        Status: LEGACY, TRANSITIONAL (as versioned identifier)
      $ref: "#/$defs/RefSeqId"

    referenceBases:
      description: >-
        The reference bases for the variant at the indicated position. It is based
        on the VCF cocept of having (anchored) reference bases at an indicated
        genomic location in combination with `alternateBases` to define their
        replacement. In contrast, standards such as GA4GH VRS only indicate the
        `sequence` observed at a given base position, including the use of an empty
        sequence together with `start` + `end` positions with `end - start > 0`
        to indicate deletions.
        Origin: VCF derived (optional) use in Beacon v0.3 -> v2.1
        Status: LEGACY
      $ref: "#/$defs/Sequence"

    alternateBases:
      description: >-
        The bases of a sequence variant at a given position differing from the
        reference sequence, as defined by the `referenceBases` parameter. Please
        see `refereenceBases` for further information.
        Origin: VCF derived use in Beacon v0.3 -> v2.1
        Status: LEGACY
      $ref: "#/$defs/Sequence"

    variantType:
      description: >-
        The `variantType` is used to query variants which are not defined through
        a sequence of one or more bases using the `alternateBases` parameter. This
        VCF derived parameter is being replaced by the more specific VRS derived
        parameters such as `copyChange`.
        (Legacy) Examples here are e.g. structural variants:
        * DUP
          - increased allelic count of material from the genomic region between
            `start` and `end` positions
          - no assumption about the placement of the additional sequences is being
            made (i.e. no _in situ_ requirement as tandem duplications)
        * DEL: deletion of sequence following `start`
        In contrast to the updated VRS based v2.n parameters such as `copyChange`
        the Beacon v1.1 -> v2.1 query model is not prescriptive with regard to the
        values allowed for `variantType` with use of extended types (e.g. `EFO:0030063`)
        being permitted. However, a support for the basic CNV types above - where
        represented in the data - is recommended.
        Status: LEGACY with potential use in v2.n for non-CNV parameters 
        Note: The VRS v2 `copyChange` is now a partial and more specific replacement
              over `variantType` for copy number variations. However, additional
              concepts so far have not been covered and might warrant use of an
              additional parameter (`variantClass`?).
      type: string
      examples:
        - EFO:0030070
        - DUP
        - DEL
        - EFO:0030069

################################################################################
# The `mate...` parameters are considered as untested parts of earlier Beacon
# specifications and are not supported in v2.n (see `adjacency...` parameters)
################################################################################

    mateName:
      description: >-
        Status: DEPRECATED in v2.n
        Notes:
        * while the `mateName` parameter was originally defined for Beacon v1.1
          it was never properly documented and is not considered a part of the
          supported Beacon v2.n specification. It is now fully implemented in the
          VRS v2 based `adjacencyAccession` parameter.
      $ref: "#/$defs/RefSeqId"

    mateStart:
      type: integer
      description: >-
        genomic start position of fusion partner breakpoint region
        Status: DEPRECATED in v2.n (see `mateName`)

    mateEnd:
      type: integer
      description: >-
        genomic end position of fusion partner breakpoint region
        Status: DEPRECATED in v2.n (see `mateName`)


################################################################################
################################################################################
# / properties #################################################################
################################################################################
################################################################################

################################################################################
################################################################################
# definitions ##################################################################
################################################################################
################################################################################

$defs:

  Range:
    description: >-
      An array of 2 integer sequence positions (0-based, inclusive).
    type: array
    items: 
      type: integer
      minimum: 0
      minItems: 2
      maxItems: 2

  RefgetAccession:
    description: >-
      A GA4GH RefGet identifier for the reference sequence, _i.e._ either a
      computed GA4GH checksum or other unique namespaced identifier supported
      by the server.
      Origin: VRS v2
      Reference: [GA4GH RefGet](http://samtools.github.io/hts-specs/refget.html)
    type: string
    examples:
      - refseq:NC_000009.12
      - ga4gh:SQ.S_KjnFVz-FE7M0W6yoaUDgYxLPc1jyWU

  Sequence:
    description: >-
      DNA bases.
      * Accepted values: `[ACGTN]*`
      * N is a wildcard, that denotes the position of any base,
        and can be used as a standalone base of any type or within a partially known
        sequence. As example, a query of `ANNT` the Ns can take take any form of [ACGT]
        and will match `ANNT`, `ACNT`, `ACCT`, `ACGT` ... and so forth.
      Origin: VRS v1.n
      TODO: Review use of base characters.
    type: string

################################################################################
# properties below are deprecated and will be removed in future versions
################################################################################

  Assembly:
    description: >-
      Genomic assembly accession and version as RefSqeq assembly accession
      (e.g. "GCF_000001405.39") or a versioned assembly name or synonym such as UCSC
      Genome Browser assembly (e.g. "hg38") or Genome Reference Consortium Human (e.g.
      "GRCh38.p13") names.
      DEPRECATION NOTE: The use of a assembly specific sequence identifier obviates
      this parameter. Not part of VRS v2 aligned model versions.
    type: string
    example:
      - GCF_000001405.39
      - hg38
      - GRCh38.p13

  RefSeqId:
    description: >-
      Reference sequence id for genomic reference sequence in which variant
      coordinates are given, e.g. "refseq:NC_000009.12" for human chromosome 9 in the
      GRCh38 assembly. The use of the assembly specific RefSeqId is recommended
      although alternatively names, synonymous or aliases e.g. "chr9" could be
      used in conjunction with an `Assembly` parameter.
      DEPRECATION NOTE: To be replaced with the `RefgetAccession` from
      VRS v2.
    type: string
    example:
      - refseq:NC_000009.12
      - chr9
      - NC_012920.1

