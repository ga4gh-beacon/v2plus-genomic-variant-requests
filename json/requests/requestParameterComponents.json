{
    "$defs": {
        "AdjacencyAccession": {
            "$ref": "#/$defs/RefgetAccession",
            "description": "A GA4GH RefGet identifier for the *adjacent* sequence in adjacency/fusion scenarios."
        },
        "AdjacencyEnd": {
            "description": "End position or range (_i.e._ in case of a fuzzy breakpoint) on an adjacent sequence in case of a sequence adjecency Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification",
            "oneOf": [
                "integer",
                {
                    "$ref": "#/$defs/Range"
                }
            ]
        },
        "AdjacencyStart": {
            "description": "Start position or range (_i.e._ in case of a fuzzy breakpoint) on an adjacent sequence in case of a sequence adjecency Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification",
            "oneOf": [
                "integer",
                {
                    "$ref": "#/$defs/Range"
                }
            ]
        },
        "AlternateBases": {
            "$ref": "./common/requestParameterComponents.json#/$defs/Sequence",
            "description": "The bases of a sequence variant at a given position differing from the reference sequence, as defined by the `referenceBases` parameter. Please see `refereenceBases` for further information. Origin: VCF derived use in Beacon v0.3 -> v2.1 Status: LEGACY"
        },
        "AminoacidChange": {
            "description": "Aminoacid alteration of interest. Format 1 letter Origin: Beacon v2.0",
            "examples": [
                "V600E",
                "M734V"
            ],
            "type": "string"
        },
        "Assembly": {
            "description": "Genomic assembly accession and version as RefSqeq assembly accession (e.g. \"GCF_000001405.39\") or a versioned assembly name or synonym such as UCSC Genome Browser assembly (e.g. \"hg38\") or Genome Reference Consortium Human (e.g. \"GRCh38.p13\") names. DEPRECATION NOTE: The use of a assembly specific sequence identifier obviates this parameter. Not part of VRS v2 aligned model versions.",
            "example": [
                "GCF_000001405.39",
                "hg38",
                "GRCh38.p13"
            ],
            "type": "string"
        },
        "CopyChange": {
            "description": "MUST use a primaryCode representing one of: * EFO:0030069: complete genomic loss * EFO:0020073: high-level loss * EFO:0030068: low-level loss * EFO:0030067: loss * EFO:0030064: regional base ploidy * EFO:0030070: gain * EFO:0030071: low-level gain * EFO:0030072: high-level gain Endpoints are expected to provide query expansion according to the hierarchy of the terms: ``` - EFO:0030064 - EFO:0030067\n    |- EFO:0030068\n    \\- EFO:0020073\n         \\- EFO:0030069\n- EFO:0030070\n    |- EFO:0030071\n    \\- EFO:0030072\n``` Origin: Beacon v2.n, based on VRS v1.3+",
            "enum": [
                "EFO:0030069",
                "EFO:0020073",
                "EFO:0030068",
                "EFO:0030067",
                "EFO:0030064",
                "EFO:0030070",
                "EFO:0030071",
                "EFO:0030072"
            ],
            "type": "string"
        },
        "End": {
            "description": "NOTE: See the `start` parameter for information on the potential replacement\n      of this parameter with the VRS based definition.\nPrecise or bracketing the end of the variants of interest: * (0-based, exclusive) - see `start` * for bracket queries, provide 2 values (e.g. [111,222]).\"",
            "items": {
                "format": "int64",
                "minimum": 1,
                "type": "integer"
            },
            "maxItems": 2,
            "minItems": 1,
            "type": "array"
        },
        "GeneId": {
            "description": "* A gene identifier * It is strongly suggested to use a symbol following\n  the HGNC (https://www.genenames.org) nomenclature.\nOrigin: Beacon v2.0",
            "examples": [
                "BRAF",
                "SCN5A"
            ],
            "type": "string"
        },
        "GenomicAlleleShortForm": {
            "description": "HGVSId descriptor Origin: Beacon v2.0",
            "examples": [
                "NM_004006.2:c.4375C>T"
            ],
            "type": "string"
        },
        "MateEnd": {
            "description": "genomic end position of fusion partner breakpoint region Status: DEPRECATED in v2.n (see `mateName`)",
            "type": "integer"
        },
        "MateName": {
            "$ref": "#/$defs/RefSeqId",
            "description": "Status: DEPRECATED in v2.n Notes: * while the `mateName` parameter was originally defined for Beacon v1.1\n  it was never properly documented and is not considered a part of the\n  supported Beacon v2.n specification. It is now fully implemented in the\n  VRS v2 based `adjacencyAccession` parameter."
        },
        "MateStart": {
            "description": "genomic start position of fusion partner breakpoint region Status: DEPRECATED in v2.n (see `mateName`)",
            "type": "integer"
        },
        "Range": {
            "description": "An array of 2 integer sequence positions (0-based, inclusive).",
            "items": {
                "maxItems": 2,
                "minItems": 2,
                "minimum": 0,
                "type": "integer"
            },
            "type": "array"
        },
        "RefSeqId": {
            "description": "Reference sequence id for genomic reference sequence in which variant coordinates are given, e.g. \"refseq:NC_000009.12\" for human chromosome 9 in the GRCh38 assembly. The use of the assembly specific RefSeqId is recommended although alternatively names, synonymous or aliases e.g. \"chr9\" could be used in conjunction with an `Assembly` parameter. DEPRECATION NOTE: To be replaced with the `RefgetAccession` from VRS v2.",
            "example": [
                "refseq:NC_000009.12",
                "chr9",
                "NC_012920.1"
            ],
            "type": "string"
        },
        "ReferenceBases": {
            "$ref": "#/$defs/Sequence",
            "description": "The reference bases for the variant at the indicated position. It is based on the VCF cocept of having (anchored) reference bases at an indicated genomic location in combination with `alternateBases` to define their replacement. In contrast, standards such as GA4GH VRS only indicate the `sequence` observed at a given base position, including the use of an empty sequence together with `start` + `end` positions with `end - start > 0` to indicate deletions. Origin: VCF derived (optional) use in Beacon v0.3 -> v2.1 Status: LEGACY"
        },
        "RefgetAccession": {
            "description": "A GA4GH RefGet identifier for the reference sequence, _i.e._ either a computed GA4GH checksum or other unique namespaced identifier supported by the server. It replaces the `referenceName` and `assemblyId` parameters according to the VRS v2 definition. Origin: VRS v2 Reference: [GA4GH RefGet](http://samtools.github.io/hts-specs/refget.html)",
            "examples": [
                "refseq:NC_000009.12",
                "ga4gh:SQ.S_KjnFVz-FE7M0W6yoaUDgYxLPc1jyWU"
            ],
            "type": "string"
        },
        "Sequence": {
            "description": "DNA bases. * Accepted values: `[ACGTN]*` * N is a wildcard, that denotes the position of any base,\n  and can be used as a standalone base of any type or within a partially known\n  sequence. As example, a query of `ANNT` the Ns can take take any form of [ACGT]\n  and will match `ANNT`, `ACNT`, `ACCT`, `ACGT` ... and so forth.\nOrigin: VRS v1.n TODO: Review use of base characters.",
            "type": "string"
        },
        "SequenceEnd": {
            "description": "End position or range (_i.e._ in case of a fuzzy breakpoint) on a sequence. Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification",
            "oneOf": [
                "integer",
                {
                    "$ref": "#/$defs/Range"
                }
            ]
        },
        "SequenceStart": {
            "description": "Start position or range (_i.e._ in case of a fuzzy breakpoint) on a sequence. Status: PROPOSED FOR BEACON v2.n, based on VRS v2 with modification",
            "oneOf": [
                "integer",
                {
                    "$ref": "#/$defs/Range"
                }
            ]
        },
        "Start": {
            "description": "NOTE: This parameter will be _potentially_ replaced by the VRS based definition\n      which uses either an integer or a Range (2 integers) in contrast to\n      the use of an array with 1 or 2 integers here. The difference lies in \n      the format of \"1 integer array\" versus \"1 integer\".\nPrecise or fuzzy start coordinate position(s), allele locus (0-based, inclusive). * `start` only:\n  - for single positions, e.g. the start of a specified sequence\n    alteration where the size is given through the specified `alternateBases`\n  - typical use are queries for SNV and small InDels\n  - the use of `start` without an `end` parameter requires the use of\n    `alternateBases`\n* 1 value in both `start` and `end`:\n  - for searching any variant falling fully or partially within the range\n    between `start` and `end` (a.k.a. \"range query\")\n  - additional use of `variantType` OR `alternateBases` can limit the\n    scope of the query\n  - by convention, partial overlaps of variants with the indicated genomic\n    range are accepted; for specific overlap requirements the 4-parameter\n    \"Bracket Queries\" should be employed\n* 2 values in both `start` and `end` for constructing a \"Bracket Query\":\n  - can be used to match any contiguous genomic interval, e.g. for querying\n    imprecise positions\n  - identifies all structural variants starting between `start[0]` and `start[1]`,\n    and ending between `end[0]` <-> `end[1]`\n  - single or double sided precise matches can be achieved by setting\n    `start[1]=start[0]+1` and `end[1]=end[0]+1`",
            "items": {
                "format": "int64",
                "minimum": 0,
                "type": "integer"
            },
            "maxItems": 2,
            "minItems": 1,
            "type": "array"
        },
        "VariantId": {
            "description": "* A variant identifier such as a VRSid, ClinVar id, dbSNP rsID or a\n  COSMIC identifier\n* In the default data model this query parameter corresponds to\n  `identifiers.variantAlternateIds` but potentially can map to other\n  identifiers as well.\nStatus: PROPOSED FOR BEACON v2.n",
            "examples": [
                "ClinGen:CA152954",
                "dbSNP:rs587780345"
            ],
            "type": "string"
        },
        "VariantMaxLength": {
            "description": "* Maximum length in bases of a genomic variant. * This is an optional parameter without prescribed use. While a length is\n  commonly available for structural variants such as copy number variations,\n  it is recommended that length based queries should also be supported for\n  variants with indicated referenceBases and alternateBases, to enable\n  length-specific wildcard queries.\nOrigin: Beacon v2.0",
            "format": "int64",
            "minimum": 1,
            "type": "integer"
        },
        "VariantMinLength": {
            "description": "* Minimum length in bases of a genomic variant * This is an optional parameter without prescribed use. While a length is\n  commonly available for structural variants such as copy number variations,\n  it is recommended that length based queries should also be supported for\n  variants with indicated referenceBases and alternateBases, to enable\n  length-specific wildcard queries.\nOrigin: Beacon v2.0",
            "format": "int64",
            "minimum": 0,
            "type": "integer"
        },
        "VariantType": {
            "description": "The `variantType` is used to query variants which are not defined through a sequence of one or more bases using the `alternateBases` parameter. This VCF derived parameter is being replaced by the more specific VRS derived parameters such as `copyChange`. (Legacy) Examples here are e.g. structural variants: * DUP\n  - increased allelic count of material from the genomic region between\n    `start` and `end` positions\n  - no assumption about the placement of the additional sequences is being\n    made (i.e. no _in situ_ requirement as tandem duplications)\n* DEL: deletion of sequence following `start` In contrast to the updated VRS based v2.n parameters such as `copyChange` the Beacon v1.1 -> v2.1 query model is not prescriptive with regard to the values allowed for `variantType` with use of extended types (e.g. `EFO:0030063`) being permitted. However, a support for the basic CNV types above - where represented in the data - is recommended. Status: LEGACY with potential use in v2.n for non-CNV parameters  Note: The VRS v2 `copyChange` is now a partial and more specific replacement\n      over `variantType` for copy number variations. However, additional\n      concepts so far have not been covered and might warrant use of an\n      additional parameter (`variantClass`?).",
            "examples": [
                "EFO:0030070",
                "DUP",
                "DEL",
                "EFO:0030069"
            ],
            "type": "string"
        }
    },
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "description": "Component definitions for `requestPatterns`. The definition of each parameter as a component allows for reuse across multiple request patterns but also for e.g. easy referencing in OpenAPI endpoints."
}